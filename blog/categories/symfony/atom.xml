<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Symfony | Seductive Programming Blog]]></title>
  <link href="http://aequasi.github.io/blog/categories/symfony/atom.xml" rel="self"/>
  <link href="http://aequasi.github.io/"/>
  <updated>2013-07-31T06:14:43+00:00</updated>
  <id>http://aequasi.github.io/</id>
  <author>
    <name><![CDATA[Aaron Scherer]]></name>
    <email><![CDATA[aequasi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Symfony Reverse Proxy: Memcached]]></title>
    <link href="http://aequasi.github.io/blog/2013/07/29/syfmony-reverse-proxy-memcached/"/>
    <updated>2013-07-29T14:45:00+00:00</updated>
    <id>http://aequasi.github.io/blog/2013/07/29/syfmony-reverse-proxy-memcached</id>
    <content type="html"><![CDATA[<h2>The Background</h2>

<p>Basically, we wanted to be able to use a simple Reverse Proxy (not Varnish, not Squid), that used a Memcache installation, instead of the file system.</p>

<h2>The Solution &ndash; Short</h2>

<p>I wrote a new <code>MemcachedStore</code> class that <code>AppCache</code> now uses instead. The biggest downside is, the configs for the servers isnt used by the AppCache piece.</p>

<h2>The Solution &ndash; Long</h2>

<p>Heres the <a href="https://gist.github.com/aequasi/6108241">MemcachedStore class</a>. Right now, its set up to use my <a href="https://packagist.org/packages/aequasi/memcached-bundle"><code>AequasiMemcachedBundle</code></a> symfony bundle at the moment, but it wouldnt be that hard to change to just using <code>Memcached</code> or <code>Memcache</code>.</p>

<p>Place this file in your <code>app</code> directory.</p>

<p>Then, in <code>app/AppCache.php</code>, do the following:</p>

<ol>
<li><p>Require the <code>MemcachedStore</code> class at the top</p>

<p> ```php
 require_once <strong>DIR</strong> . &lsquo;/MemcachedStore.php&rsquo;;
 ````</p></li>
<li><p>Overwrite the <code>createStore()</code> function</p>

<p> ```php
 public function createStore()
 {
     $servers = [
         [ &lsquo;localhost&rsquo;, 11211 ]
     ];</p>

<pre><code> return new MemcachedStore( [
     'enabled'      =&gt; true,
     'debug'        =&gt; true,
     'persistentId' =&gt; serialize( $servers )
 ], $servers );
</code></pre>

<p> }
 ```</p></li>
<li><p>?!?$?</p></li>
<li><p>Profit.</p></li>
</ol>


<p>If you want to create a service to get to this particular store, you would have to create a <code>$cache</code> variable in your <code>app/AppKernel</code>, and overwrite your <code>app/AppCache</code>&rsquo;s <code>handle()</code> method to set the kernel&rsquo;s <code>$cache</code> variable before calling <code>parent::handle</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better Symfony Environments: Large Systems]]></title>
    <link href="http://aequasi.github.io/blog/2013/06/10/better-symfony-environments-large-systems/"/>
    <updated>2013-06-10T23:26:00+00:00</updated>
    <id>http://aequasi.github.io/blog/2013/06/10/better-symfony-environments-large-systems</id>
    <content type="html"><![CDATA[<h2>The Background</h2>

<p>At my work, we deal with a project where we have several development servers, a few staging servers, and hundreds of production servers.</p>

<h2>The Issue</h2>

<p>Having to deal with all four different environment types, without having environments hardcoded into the project is a little weird, and currently lacks much any real solutions, regarding symfony&rsquo;s documentation.</p>

<h2>The Solution &ndash; Short</h2>

<p>In short, I implemented a class that we use in <code>app/console</code> and <code>web/app.php</code>, that reads an Apache environment variable or a <code>php.ini</code> variable with <code>get_cfg_var()</code>.</p>

<h2>The Solution &ndash; Long</h2>

<p>Like I said above, I made an <code>Environment</code> class to check what environment the server belongs in. I made it a gist for you guys: <a href="https://gist.github.com/5753723.git.">https://gist.github.com/5753723.git.</a></p>

<p>Basically, this environment class, can take an <code>ArgvInput</code> param as a constructor, and if it does, it assumes that it&rsquo;s CLI. If it&rsquo;s CLI, it will do the same CLI checks the symfony does by default for <code>$env</code>, and <code>$debug</code>. Cli and web both allow for specifying <code>symfony.environment</code> in php.ini as well, and the web piece allows you to specify an apache env variable (e.g. <code>SetEnv SYM_ENV stage</code>).</p>

<p>Once you&rsquo;ve got that code, place it into <code>app/Environment.php</code> (you&rsquo;ll have to create it). From there, copy the logic I&rsquo;ve got for <code>app/consle</code> and <code>web/app.php</code> below.</p>

<p><code>ini /etc/php5/conf.d/symfony.ini
[symfony]
symfony.environment = staging
</code></p>

<p>``` php console
&lt;?php
set_time_limit(0);</p>

<p>require_once <strong>DIR</strong>.&lsquo;/bootstrap.php.cache&rsquo;;
require_once <strong>DIR</strong>.&lsquo;/AppKernel.php&rsquo;;
require_once <strong>DIR</strong> .&lsquo;/../app/Environment.php&rsquo;;</p>

<p>use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;</p>

<p>$input = new ArgvInput( );
$env = new \Environment( $input );</p>

<p>$kernel = new AppKernel( $env->getEnvironment(), $env->getDebug() );
$application = new Application($kernel);
$application->run( $input );
```</p>

<p>``` php app.php
&lt;?php</p>

<p>use Symfony\Component\HttpFoundation\Request;</p>

<p>$loader = require_once <strong>DIR</strong>.&lsquo;/../app/bootstrap.php.cache&rsquo;;
require_once <strong>DIR</strong>.&lsquo;/../app/AppKernel.php&rsquo;;
require_once <strong>DIR</strong> .&lsquo;/../app/Environment.php&rsquo;;</p>

<p>$env = new \Environment();</p>

<p>$kernel = new AppKernel( $env->getEnvironment(), $env->getDebug() );
$kernel->loadClassCache();
Request::enableHttpMethodParameterOverride();
$request = Request::createFromGlobals();
$response = $kernel->handle($request);
$response->send();
$kernel->terminate($request, $response);
```</p>
]]></content>
  </entry>
  
</feed>
