<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Seductive Programming Blog]]></title>
  <link href="http://aequasi.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://aequasi.github.io/"/>
  <updated>2013-06-11T17:02:31+00:00</updated>
  <id>http://aequasi.github.io/</id>
  <author>
    <name><![CDATA[Aaron Scherer]]></name>
    <email><![CDATA[aequasi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Better Symfony Environments: Large Systems]]></title>
    <link href="http://aequasi.github.io/blog/2013/06/10/better-symfony-environments-large-systems/"/>
    <updated>2013-06-10T23:26:00+00:00</updated>
    <id>http://aequasi.github.io/blog/2013/06/10/better-symfony-environments-large-systems</id>
    <content type="html"><![CDATA[<h2>The Background</h2>

<p>At my work, we deal with a project where we have several development servers, a few staging servers, and hundreds of production servers.</p>

<h2>The Issue</h2>

<p>Having to deal with all four different environment types, without having environments hardcoded into the project is a little weird, and currently lacks much any real solutions, regarding symfony&rsquo;s documentation.</p>

<h2>The Solution &ndash; Short</h2>

<p>In short, I implemented a class that we use in <code>app/console</code> and <code>web/app.php</code>, that reads an Apache environment variable.</p>

<h2>The Solution &ndash; Long</h2>

<p>Like I said above, I made an <code>Environment</code> class to check what environment the server belongs in. I made it a gist for you guys: <a href="https://gist.github.com/5753723.git.">https://gist.github.com/5753723.git.</a></p>

<p>Basically, this environment class, can take an <code>ArgvInput</code> param as a constructor, and if it does, it assumes that it&rsquo;s CLI. If it&rsquo;s CLI, it will do the same CLI checks the symfony does by default for <code>$env</code>, and <code>$debug</code>. Cli and web both allow for specifying <code>symfony.environment</code> in php.ini as well, and the web piece allows you to specify an apache env variable (e.g. <code>SetEnv SYM_ENV stage</code>).</p>

<p>Once you&rsquo;ve got that code, place it into <code>app/Environment.php</code> (you&rsquo;ll have to create it). From there, copy the logic I&rsquo;ve got for <code>app/consle</code> and <code>web/app.php</code> below.</p>

<p>``` php console
&lt;?php
set_time_limit(0);</p>

<p>require_once <strong>DIR</strong>.&lsquo;/bootstrap.php.cache&rsquo;;
require_once <strong>DIR</strong>.&lsquo;/AppKernel.php&rsquo;;
require_once <strong>DIR</strong> .&lsquo;/../app/Environment.php&rsquo;;</p>

<p>use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;</p>

<p>$input = new ArgvInput( );
$env = new \Environment( $input );</p>

<p>$kernel = new AppKernel( $env->getEnvironment(), $env->getDebug() );
$application = new Application($kernel);
$application->run( $input );
```</p>

<p>``` php app.php
&lt;?php</p>

<p>use Symfony\Component\HttpFoundation\Request;</p>

<p>$loader = require_once <strong>DIR</strong>.&lsquo;/../app/bootstrap.php.cache&rsquo;;
require_once <strong>DIR</strong>.&lsquo;/../app/AppKernel.php&rsquo;;
require_once <strong>DIR</strong> .&lsquo;/../app/Environment.php&rsquo;;</p>

<p>$env = new \Environment();</p>

<p>$kernel = new AppKernel( $env->getEnvironment(), $env->getDebug() );
$kernel->loadClassCache();
Request::enableHttpMethodParameterOverride();
$request = Request::createFromGlobals();
$response = $kernel->handle($request);
$response->send();
$kernel->terminate($request, $response);
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guzzle]]></title>
    <link href="http://aequasi.github.io/blog/2013/06/03/guzzle/"/>
    <updated>2013-06-03T04:18:00+00:00</updated>
    <id>http://aequasi.github.io/blog/2013/06/03/guzzle</id>
    <content type="html"><![CDATA[<p>After having been to Portland for the Symfony Live conference, I was asked to put together a presentation on something that I learned that would be benificial for the company.</p>

<p>I decided to go with the Guzzle HTTP client. Here are the slides: <a href="http://guzzle.aaronscherer.me">http://guzzle.aaronscherer.me</a></p>

<iframe height="500" width="700" src="http://guzzle.aaronscherer.me"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony2 Testing: Testing Services in Request Scope]]></title>
    <link href="http://aequasi.github.io/blog/2013/05/30/symfony2-testing-testing-services-in-request-scope/"/>
    <updated>2013-05-30T18:19:00+00:00</updated>
    <id>http://aequasi.github.io/blog/2013/05/30/symfony2-testing-testing-services-in-request-scope</id>
    <content type="html"><![CDATA[<p>Getting into testing at work with one of our new projects, and we need to be able to test our services. The biggest problem I had here, is that we have several services not in the default scope. After a little bit of digging and testing, I came up with this:</p>

<p>``` php RequestServiceTest.php
&lt;?php
/<em>*
 * @author    Aaron Scherer <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#97;&#x61;&#x72;&#x6f;&#110;&#64;&#117;&#110;&#100;&#101;&#114;&#103;&#114;&#x6f;&#117;&#x6e;&#100;&#101;&#x6c;&#x65;&#112;&#104;&#97;&#110;&#116;&#46;&#x63;&#111;&#x6d;">&#x61;&#97;&#x72;&#111;&#x6e;&#64;&#x75;&#x6e;&#x64;&#x65;&#x72;&#x67;&#x72;&#111;&#x75;&#110;&#100;&#x65;&#108;&#101;&#112;&#104;&#97;&#110;&#116;&#x2e;&#99;&#111;&#109;</a>
 * @date      2013
 * @copyright Underground Elephant
 </em>/
namespace Ue\Bundle\RenderBundle\Tests\Service;</p>

<p>use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpKernel\HttpKernelInterface;
use Symfony\Component\HttpFoundation\Request;</p>

<p>use Ue\Bundle\RenderBundle\Service\RequestService;</p>

<p>/<em>*
 * RequestServiceTest Class
 </em>/
class RequestServiceTest extends WebTestCase
{</p>

<pre><code>/**
 * @var RequestService
 */
private $requestService;

/**
 * @var
 */
private $container;

/**
 * {@inheritDoc}
 */
public function setUp()
{
    $container = $this-&gt;getContainer();
    $container-&gt;enterScope( 'request' );
    $request = Request::create( '/t/1/' );
    $session = $this-&gt;getMock( 'Symfony\Component\HttpFoundation\Session\SessionInterface' );
    $request-&gt;setSession( $session );
    $this-&gt;getContainer()-&gt;set( 'request', $request );

    $this-&gt;requestService = $this-&gt;container-&gt;get( 'ue.render.request' );
}

/**
 * {@inheritDoc}
 */
public function tearDown()
{
    $this-&gt;getContainer()-&gt;leaveScope('request');
}

/**
 * @return mixed
 */
public function getContainer()
{
    if ( $this-&gt;container ) {
        return $this-&gt;container;
    }

    static::$kernel = static::createKernel( );
    static::$kernel-&gt;boot();

    $this-&gt;container = static::$kernel-&gt;getContainer();

    return $this-&gt;container;
}

/**
 * Testing the constructor, and service call
 */
public function testRequestService()
{

    $expected = 'Ue\Bundle\RenderBundle\Service\RequestService';
    $this-&gt;assertInstanceOf(
        $expected,
        $this-&gt;requestService,
        sprintf( "Expected %s for requestService. Got %s.", $expected, get_class( $this-&gt;requestService ) )
    );
}

/**
 * @depends testRequestService
 */
public function testBuildRequest()
{
    $this-&gt;requestService-&gt;setTestId( 1 );

    $expected = 'Ue\Bundle\RenderBundle\Model\Request';
    $request  = $this-&gt;requestService-&gt;buildRequest();
    $this-&gt;assertInstanceOf(
        $expected,
        $request,
        sprintf( "Expected %s for response from buildRequest(). Got %s instead.", $expected, get_class( $request ) )
    );
}
</code></pre>

<p>}
?>
```</p>

<p>This creates the request (which you need to get the service), sets up the kernel, and because our <code>RequestService</code> is in the <code>request</code> scope, enters the <code>request</code> scope with <code>$container-&gt;enterScope( 'request' );</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking Named Class Inheritance]]></title>
    <link href="http://aequasi.github.io/blog/2013/05/24/checking-named-class-inheritance/"/>
    <updated>2013-05-24T15:26:00+00:00</updated>
    <id>http://aequasi.github.io/blog/2013/05/24/checking-named-class-inheritance</id>
    <content type="html"><![CDATA[<hr />

<p>I have been working on a new cache implementation for the <code>Symfony2</code> framework, and I needed a way to check if a named class inherited a given interface , so i wrote the following:</p>

<p>``` php
&lt;?php
function classInherits( $class, $inherit ) {</p>

<pre><code>if( is_object( $class ) ) {
    return ( $class instanceof $inherit );
} elseif( is_string( $class ) ) {
    return (bool) in_array( $inherit, class_implements( $class ) );
}

throw new Exception( "First value must be the name of a valid class, or an instance of one." );
</code></pre>

<p>}
?>
```</p>

<p>Hope this helps!</p>
]]></content>
  </entry>
  
</feed>
