<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seductive Programming Blog]]></title>
  <link href="http://aequasi.github.io/atom.xml" rel="self"/>
  <link href="http://aequasi.github.io/"/>
  <updated>2013-05-29T07:16:12+00:00</updated>
  <id>http://aequasi.github.io/</id>
  <author>
    <name><![CDATA[Aaron Scherer]]></name>
    <email><![CDATA[aequasi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IP Based Htaccess Restriction]]></title>
    <link href="http://aequasi.github.io/blog/2013/05/29/ip-based-htaccess-restriction/"/>
    <updated>2013-05-29T07:01:00+00:00</updated>
    <id>http://aequasi.github.io/blog/2013/05/29/ip-based-htaccess-restriction</id>
    <content type="html"><![CDATA[<p>A couple months ago, I was looking for a way to restrict a development site in such a way, that while people were at work (where we have a static IP), and then require an .htpasswd file for everyone outside.</p>

<p>Well, it was actually kind of simple. After youve got your .htpasswd file set up, just throw this inside your vhost</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">AuthName</span> <span class="s2">&quot;Change This&quot;</span>
</span><span class='line'><span class="nb">AuthUserFile</span> <span class="sx">/path/to/.htpasswd</span>
</span><span class='line'><span class="nb">AuthType</span> Basic
</span><span class='line'><span class="nb">Satisy</span> <span class="k">Any</span>
</span><span class='line'><span class="nt">&lt;Limit</span> <span class="s">GET POST</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">Order</span> Deny,Allow
</span><span class='line'>  <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nb">Allow</span> from <span class="m">12.34.56.789</span>
</span><span class='line'>  <span class="nb">Require</span> valid-user
</span><span class='line'><span class="nt">&lt;/Limit&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For your environment, you should change the <code>AuthName</code>, the <code>AuthUserFile</code>, the <code>Limit</code> (maybe, <code>GET</code> and <code>POST</code> might be enough), and the IP (<code>12.34.56.789</code>).</p>

<p>Change out the variables for what your environment requires, and you should be all set.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking Named Class Inheritance]]></title>
    <link href="http://aequasi.github.io/blog/2013/05/24/checking-named-class-inheritance/"/>
    <updated>2013-05-24T15:26:00+00:00</updated>
    <id>http://aequasi.github.io/blog/2013/05/24/checking-named-class-inheritance</id>
    <content type="html"><![CDATA[<hr />

<p>I have been working on a new cache implementation for the <code>Symfony2</code> framework, and I needed a way to check if a named class inherited a given interface , so i wrote the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">classInherits</span><span class="p">(</span> <span class="nv">$class</span><span class="p">,</span> <span class="nv">$inherit</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="nb">is_object</span><span class="p">(</span> <span class="nv">$class</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span> <span class="nv">$class</span> <span class="nx">instanceof</span> <span class="nv">$inherit</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">elseif</span><span class="p">(</span> <span class="nb">is_string</span><span class="p">(</span> <span class="nv">$class</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="nx">bool</span><span class="p">)</span> <span class="nb">in_array</span><span class="p">(</span> <span class="nv">$inherit</span><span class="p">,</span> <span class="nb">class_implements</span><span class="p">(</span> <span class="nv">$class</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span> <span class="s2">&quot;First value must be the name of a valid class, or an instance of one.&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beautiful Bash Prompt]]></title>
    <link href="http://aequasi.github.io/blog/2013/05/23/beautiful-bash-prompt/"/>
    <updated>2013-05-23T18:14:00+00:00</updated>
    <id>http://aequasi.github.io/blog/2013/05/23/beautiful-bash-prompt</id>
    <content type="html"><![CDATA[<hr />

<p>I have been using linux for several years now, and my bash prompt has been evolving more and more, every time I use it, but I wanted to share with you guys today, what mine looks like, and how yours can look the same.</p>

<p><img src="http://aequasi.github.io/images/posts/bash/bash-prompt.png"></p>

<ol>
<li>First off, we need a file of color codes.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone https://gist.github.com/5638294.git <span class="o">&amp;&amp;</span> mv 5638294/colors.sh ~/ <span class="o">&amp;&amp;</span> sudo rm -r 5638294 <span class="o">&amp;&amp;</span> chmod +x ~/colors.sh <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&quot;source ~/colors.sh&quot;</span> &gt;&gt; ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Now that we have all the colors sources into the bashrc, we can create the PS1.
Take the following, and place it at the bottom of your <code>~/.bashrc</code> file, after <code>source ~/colors.sh</code>.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export PS1=&quot;\n\[$Blue\]+-[\[$Color_Off\]\[$Yellow\]\u\[$Color_Off\]\[$Cyan\]@\[$Color_Off\]\[$Yellow\]\h\[$Color_Off\]\[$Blue\]]-[\[$Color_Off\]\[$White\]\w\[$Color_Off\]\[$Blue\]][\[$Color_Off\]\[$Red\]\T\[$Color_Off\]\[$Blue\]]\[$Color_Off\]\n\[$Blue\]+-\[$Red\][\[$Color_Off\]\[$White\]\$\[$Color_Off\]\[$Red\]]~\[$Color_Off\]&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Then just reopen your prompt, and you&rsquo;ve got the new bash prompt!</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony 2 and Memcached: A new Bundle]]></title>
    <link href="http://aequasi.github.io/blog/2013/05/23/symfony-2-and-memcached-a-new-bundle/"/>
    <updated>2013-05-23T16:57:00+00:00</updated>
    <id>http://aequasi.github.io/blog/2013/05/23/symfony-2-and-memcached-a-new-bundle</id>
    <content type="html"><![CDATA[<hr />

<h3>Introduction</h3>

<p>So, I started work on a personal project of mine that I wanted to be able to use <a href="http://www.php.net/manual/en/class.memcached.php"><code>Memcached</code></a>. The project is using the <a href="http://www.symfony.com"><code>Symfony2 PHP framework</code></a>, so I decided to look around a little bit to see if I could find a bundle that does what I needed.</p>

<p>I stumbled upon the <a href="https://github.com/LeaseWeb/LswMemcacheBundle"><code>LswMemcacheBundle</code></a> at first, and it looked quite nice, having features like <code>Anti Dog Pile</code>, and <code>Profiling</code> attached to the <code>Web Profiler Toolbar</code>. I started looking at the code however, and it had a lot of bloat that I didnt want, some of the terminologies werent right, and it was missing a feature that I wanted. So I took it and decided to write my own.</p>

<h3>The Result</h3>

<p>So now, I give you the <a href="https://github.com/aequasi/memcached-bundle"><code>AequasiMemcachedBundle</code></a>! This takes a lot of the core logic, and features of the <a href="https://github.com/LeaseWeb/LswMemcacheBundle"><code>LswMemcacheBundle</code></a>, but removes the ability to use the <a href="http://www.php.net/manual/en/class.memcache.php"><code>Memcache</code></a> extension, and the compatibility with <a href="http://www.php.net/manual/en/class.memcached.php"><code>Memcached</code></a> versions below <code>2.0</code>.</p>

<h3>Features</h3>

<ul>
<li>Cluster Support

<ul>
<li>Can have mutlple clusters</li>
</ul>
</li>
<li><a href="http://www.doctrine-project.org/"><code>Doctrine</code></a> Support

<ul>
<li>Supports all doctrine cache types (<code>metadata</code>, <code>query</code>, and <code>result</code>)</li>
</ul>
</li>
<li>Session Support

<ul>
<li>Storing sessions in <a href="http://www.php.net/manual/en/class.memcached.php"><code>Memcached</code></a> instead of <a href="http://www.php.net/manual/en/class.pdo.php"><code>PDO</code></a> or <code>File</code></li>
</ul>
</li>
<li>Injectable Service

<ul>
<li>Can be used (as a service) wherever the <code>container</code> is.</li>
</ul>
</li>
<li><code>Mysql</code> Key-Map support

<ul>
<li>When storing values in <a href="http://www.php.net/manual/en/class.memcached.php"><code>Memcached</code></a>, a row is added to a mysql table, showing the key, the size of the value, how long the ttl is, and when it should expire.</li>
</ul>
</li>
</ul>


<h3>Installing</h3>

<p>To install this bundle, check out the source <a href="https://github.com/aequasi/memcached-bundle">here</a>, and follow the instructions in the readme.</p>
]]></content>
  </entry>
  
</feed>
